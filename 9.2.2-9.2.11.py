# 9.2.2 –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ n,m,k,pn,m,k,p, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –∏–∑ n —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —É m –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—ä–µ–ª–∞ —Å–æ–±–∞–∫–∞, —É k –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç, –∞ p —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ—Å—Ç–∏–≥–ª–∏ –æ–±–∞ –Ω–µ—Å—á–∞—Å—Ç—å—è.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.

n, m, k, p = [int(input()) for i in range(4)]
print(n - ((m - p) + (k - p) + p))


# 9.2.3 –°–ø—É—Ç–Ω–∏–∫ –í–æ—Å—Ö–æ–¥
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å–ø—É—Ç–Ω–∏–∫–∞,
# –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
lst = input().split()
print(len(lst) - len(set(lst)))


# 9.2.4 –ì–æ—Ä–æ–¥–∞
# –≤—ã–≤–µ—Å—Ç–∏ OK, –µ—Å–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –µ—â—ë –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏, –∏ REPEAT, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω.
lst = [input() for i in range(int(input()))]
simile = input()
print('REPEAT' if simile in lst else 'OK')


# 9.2.5 –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ m ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –†—É—Å–ª–∞–Ω–∞.
# –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚Äî  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –ª–µ—Ç–æ.
# –î–∞–ª–µ–µ –∏–¥—É—Ç mm —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–∏–≥ –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ nn —Å—Ç—Ä–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ª–µ—Ç–æ.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ n —Å—Ç—Ä–æ–∫, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –∏ NO, –µ—Å–ª–∏ –Ω–µ—Ç.
m, n = int(input()), int(input())
lst_m = [input() for _ in range(m)]
lst_n = [input() for _ in range(n)]
for i in lst_n:
    print('YES' if i in lst_m else 'NO')
# –∑–∞–ø–∏—Å—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É print —Å for
# print(*['YES' if i in lst_m else 'NO' for i in lst_n], sep = '\n')


# 9.2.6 –°—Ç—Ä–∞–Ω–Ω–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ
# –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞, –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–µ—Å—è –Ω–∞ –æ–±–æ–∏—Ö –ª–∏—Å—Ç–∫–∞—Ö (–≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ä—è–¥–∫–µ,
# –ª–∏–±–æ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ BAD DAY, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç
lst1 = set([int(i) for i in input().split()])
lst2 = set([int(i) for i in input().split()])
lst3 = lst1 & lst2
print(*sorted(lst3, reverse=True) if len(lst3) > 0 else ['BAD DAY'])


# 9.2.7 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 1
# –í—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã 2 —Ä–∞–∑ –≤—Å–µ —á–∏—Å–ª–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –ª–∏—à–Ω–∏—Ö, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
print('YES' if set(input().split()) == set(input().split()) else 'NO')


# 9.2.8 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 2
# m –∏nn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É.
# –î–∞–ª–µ–µ –∏–¥—É—Ç m —Å—Ç—Ä–æ–∫ ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ n —Å—Ç—Ä–æ–∫ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É.
m, n = int(input()), int(input())
set_m = set(input() for _ in range(m))
set_n = set(input() for _ in range(n))
print(len(set_m - set_n))


# 9.2.8 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 3
# –í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª-–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è, —Ç–æ NO
m, n = int(input()), int(input())
set_m = set(input() for _ in range(m))
set_n = set(input() for _ in range(n))
set_m.symmetric_difference_update(set_n)
print(len(set_m) if len(set_m) > 0 else 'NO')


# 9.2.9 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 4
# –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–æ–º.
set_m = set(input().split() + input().split())
print(*sorted(set_m))


# 9.2.10 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 5 üå∂Ô∏è
# –ß–∏—Å–ª–∞ m –∏ n ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
# –î–∞–ª–µ–µ –∏–¥—É—Ç m++n —Å—Ç—Ä–æ–∫ ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
# –í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è, —Ç–æ NO
m, n = int(input()), int(input())
lst_mn = [input() for _ in range(m + n)]
set_mn = set(lst_mn)
c = (len(lst_mn) - len(set_mn)) * 2
print(m + n - c if m + n - c > 0 else 'NO')


# 9.2.11 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 6 üå∂Ô∏è
# –î–∞–µ—Ç—Å—è —á–∏—Å–ª–æ m ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞.
# –î–∞–ª–µ–µ –∏–¥—ë—Ç m –±–ª–æ–∫–æ–≤ —Å—Ç—Ä–æ–∫, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –ª–∏—Å—Ç–∫–∏ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏.
# –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–º–∏–ª–∏–π n, –∑–∞—Ç–µ–º –∏–¥—ë—Ç n —Å—Ç—Ä–æ—á–µ–∫ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ —Ç–µ—Ö, –∫—Ç–æ –±—ã–ª –Ω–∞ i-–æ–º —É—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö,
# –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ö–∞–∂–¥–∞—è —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
m, n = int(input()), int(input())
first_set = set(input() for _ in range(n))
empty_set = set()
for i in range(m-1):
    empty_set = set(input() for _ in range(int(input())))
    first_set.intersection_update(empty_set)
print(*sorted(first_set), sep='\n')
